SET(CMAKE_C_FLAGS "-mthumb -fno-builtin -mcpu=cortex-m3 -Wall -std=gnu99 -ffunction-sections -fdata-sections -fomit-frame-pointer -mabi=aapcs -fno-unroll-loops -ffast-math -ftree-vectorize" CACHE INTERNAL "c compiler flags")
SET(CMAKE_CXX_FLAGS "-mthumb -fno-builtin -mcpu=cortex-m3 -Wall -std=c++11 -ffunction-sections -fdata-sections -fomit-frame-pointer -mabi=aapcs -fno-unroll-loops -ffast-math -ftree-vectorize" CACHE INTERNAL "cxx compiler flags")
SET(CMAKE_ASM_FLAGS "-mthumb -mcpu=cortex-m3 -x assembler-with-cpp" CACHE INTERNAL "asm compiler flags")

SET(CMAKE_EXE_LINKER_FLAGS "-Wl,--gc-sections -mthumb -mcpu=cortex-m3 -mabi=aapcs" CACHE INTERNAL "executable linker flags")
SET(CMAKE_MODULE_LINKER_FLAGS "-mthumb -mcpu=cortex-m3 -mabi=aapcs" CACHE INTERNAL "module linker flags")
SET(CMAKE_SHARED_LINKER_FLAGS "-mthumb -mcpu=cortex-m3 -mabi=aapcs" CACHE INTERNAL "shared linker flags")

SET(STM32_CHIP_TYPES 100xx 151xx 152xx 162xx CACHE INTERNAL "stm32l1 chip types")
SET(STM32_CODES "100.[68BC]" "151.[68BCDE]" "152.[68BCDE]" "162.[CDE]")

MACRO(STM32_GET_CHIP_TYPE CHIP CHIP_TYPE)
    STRING(REGEX REPLACE
        "^[sS][tT][mM]32[lL]((100.[68BC])|(15[12].[68BCDE])|(162.[CDE])).+$" "\\1" STM32_CODE ${CHIP})
    SET(INDEX 0)
    FOREACH(C_TYPE ${STM32_CHIP_TYPES})
        LIST(GET STM32_CODES ${INDEX} CHIP_TYPE_REGEXP)
        IF(STM32_CODE MATCHES ${CHIP_TYPE_REGEXP})
            SET(RESULT_TYPE ${C_TYPE})
        ENDIF()
        MATH(EXPR INDEX "${INDEX}+1")
    ENDFOREACH()
    SET(${CHIP_TYPE} ${RESULT_TYPE})
ENDMACRO()

MACRO(STM32_GET_CHIP_PARAMETERS CHIP FLASH_SIZE RAM_SIZE CCRAM_SIZE)
    STRING(REGEX REPLACE "^[sS][tT][mM]32[lL](1[12345678][123]).[68BCDEZ]" "\\1" STM32_CODE ${CHIP})
    STRING(REGEX REPLACE "^[sS][tT][mM]32[lL]1[12345678][123].([68BCDEZ])" "\\1" STM32_SIZE_CODE ${CHIP})
    STRING(TOUPPER ${CHIP} STM32_CHIP)

    IF(STM32_SIZE_CODE STREQUAL "3")
        SET(FLASH "8K")
    ELSEIF(STM32_SIZE_CODE STREQUAL "4")
        SET(FLASH "16K")
    ELSEIF(STM32_SIZE_CODE STREQUAL "6")
        SET(FLASH "32K")
    ELSEIF(STM32_SIZE_CODE STREQUAL "8")
        SET(FLASH "64K")
    ELSEIF(STM32_SIZE_CODE STREQUAL "B")
        SET(FLASH "128K")
    ELSEIF(STM32_SIZE_CODE STREQUAL "C")
        SET(FLASH "256K")
    ELSEIF(STM32_SIZE_CODE STREQUAL "D")
        SET(FLASH "384K")
    ELSEIF(STM32_SIZE_CODE STREQUAL "E")
        SET(FLASH "512K")
    ELSEIF(STM32_SIZE_CODE STREQUAL "Z")
        SET(FLASH "192K")
    ENDIF()

    STM32_GET_CHIP_TYPE(${CHIP} TYPE)
    
    IF(STM32_CHIP STREQUAL "STM32L100C6")
        SET(RAM "4K")
    ELSEIF(STM32_CHIP STREQUAL "STM32L100R8")
        SET(RAM "8K")
    ELSEIF(STM32_CHIP STREQUAL "STM32L100RB-A")
        SET(RAM "16K")
    ELSEIF(STM32_CHIP STREQUAL "STM32L100RC")
        SET(RAM "16K")
    ELSEIF(STM32_CHIP STREQUAL "STM32L100R8")
        SET(RAM "8K")
    ELSEIF(STM32_CHIP STREQUAL "STM32L100RB")
        SET(RAM "10K")
    ELSEIF(STM32_CHIP STREQUAL "STM32L152RE")
        SET(RAM "80K")
    ENDIF()

    SET(${FLASH_SIZE} ${FLASH})
    SET(${RAM_SIZE} ${RAM})
    SET(${CCRAM_SIZE} "0K")
ENDMACRO()

FUNCTION(STM32_SET_CHIP_DEFINITIONS TARGET CHIP_TYPE)
    LIST(FIND STM32_CHIP_TYPES ${CHIP_TYPE} TYPE_INDEX)
    IF(TYPE_INDEX EQUAL -1)
        MESSAGE(FATAL_ERROR "Invalid/unsupported STM32L1 chip type: ${CHIP_TYPE}")
    ENDIF()
    GET_TARGET_PROPERTY(TARGET_DEFS ${TARGET} COMPILE_DEFINITIONS)
    STRING(REGEX REPLACE "^.*(1..).(.)" "\\1x\\2" CHIP_TYPE_2 ${STM32_CODE})
    IF(TARGET_DEFS)
        SET(TARGET_DEFS "STM32L1;STM32L${CHIP_TYPE_2};${TARGET_DEFS}")
    ELSE()
        SET(TARGET_DEFS "STM32L1;STM32L${CHIP_TYPE_2}")
    ENDIF()
    SET_TARGET_PROPERTIES(${TARGET} PROPERTIES COMPILE_DEFINITIONS "${TARGET_DEFS}")
ENDFUNCTION()
